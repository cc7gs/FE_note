(self["webpackChunkFE_note"]=self["webpackChunkFE_note"]||[]).push([[7927],{1422:e=>{"use strict";e.exports={}},3859:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r={}},1385:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});var r=t(7294),s=t(6584),o=t(2196);t(3859);const a=e=>(r.useEffect((()=>{null!==e&&void 0!==e&&e.location.hash&&s.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"\u9879\u76ee\u642d\u5efa"},r.createElement(s.AnchorLink,{to:"#\u9879\u76ee\u642d\u5efa","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9879\u76ee\u642d\u5efa"),r.createElement("p",null,"\u521b\u5efa\u6587\u4ef6\u5939\u5e76\u8fdb\u5165:"),r.createElement("blockquote",null,r.createElement("p",null,"npm init -y")),r.createElement("h2",{id:"\u9879\u76ee\u7ed3\u6784"},r.createElement(s.AnchorLink,{to:"#\u9879\u76ee\u7ed3\u6784","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9879\u76ee\u7ed3\u6784"),r.createElement(o.Z,{code:"\u251c\u2500\u2500 READE.md\n\u251c\u2500\u2500 bin  # \u542f\u52a8\u76ee\u5f55\n\u2502   \u2514\u2500\u2500 http-server.js\n\u251c\u2500\u2500 lib # \u6e90\u7801\n\u2502   \u2514\u2500\u2500 http-server.js\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 public   #\u6d4b\u8bd5\u6570\u636e\n    \u251c\u2500\u2500 a.json\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 print.html\n    \u2514\u2500\u2500 \u4f60\u597d.txt",lang:"bash"}),r.createElement("h1",{id:"packagejson"},r.createElement(s.AnchorLink,{to:"#packagejson","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"package.json"),r.createElement(o.Z,{code:'{\n  "bin": {\n    "http-server": "./bin/http-server.js"\n  },\n  "author": "",\n  "license": "ISC",\n  "dependencies": {\n    "colors": "^1.4.0",\n    "commander": "^7.2.0",\n    "ejs": "^3.1.6",\n    "mime": "^2.5.2",\n    "opener": "^1.5.2"\n  }\n}',lang:"json"}),r.createElement("h1",{id:"bin"},r.createElement(s.AnchorLink,{to:"#bin","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"bin"),r.createElement(o.Z,{code:"// bin/http-server.js\n\n#!/usr/bin/env node\n\nconst { program } = require('commander');\nconst { version } = require('../package.json');\nconst httpServer = require('../lib/http-server');\n\nprogram.version(version);\n\nconst optConfig = {\n  //\u914d\u7f6e\u76ee\u5f55\n  port: {\n    option: '-p,--port <val>',\n    description: 'set your server port',\n    usage: 'http-server --port 3000',\n    default: 3000,\n  },\n  //\u914d\u7f6e\u76ee\u5f55\n  directory: {\n    option: '-d,--directory <val>',\n    description: 'set your directory',\n    usage: 'http-server --directory D:',\n    default: process.cwd(),\n  },\n  // \u914d\u7f6e\u4e3b\u673a\u540d\n  host: {\n    option: '-h,--host <val>',\n    description: 'set your hostname',\n    usage: 'http-server --host 127.0.0.1',\n    default: '127.0.0.1',\n\n  }\n}\n\nObject.values(optConfig).forEach(opt => {\n  program.option(opt.option, opt.description, opt.default)\n})\n\nprogram.on('--help', () => {\n  console.log('\\nExample:');\n  Object.values(optConfig).forEach(({ usage }) => {\n    console.log(`  ${usage}`);\n  })\n})\n\nprogram.parse(process.argv);\nconst options = program.opts();\nconst server = new httpServer({...options,root:program.args[0]});\nserver.start();",lang:"js"}),r.createElement("h1",{id:"create-server"},r.createElement(s.AnchorLink,{to:"#create-server","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"create-server"),r.createElement(o.Z,{code:"// /lib/http-server.js\n\nconst http = require('http');\nconst ejs = require('ejs');\nconst colors = require('colors/safe');\nconst opener = require('opener');\nconst mime = require('mime');\nconst crypto = require('crypto');\nconst path = require('path');\nconst fs = require('fs').promises;\nconst { createReadStream, createWriteStream, lstatSync } = require('fs');\n\nclass HttpServer {\n  constructor(opts) {\n    this.opts = opts;\n    this.headers = opts.headers || {};\n\n    if (opts.root) {\n      this.root = opts.root;\n    } else {\n      try {\n        lstatSync('./public');\n        this.root = './public';\n      } catch (err) {\n        this.root = './';\n      }\n    }\n  }\n  async cache(req, res, filePath, statObj) {\n    res.setHeader('Expires', new Date(Date.now() + 10 * 1000).toUTCString());\n    res.setHeader('Cache-Control', 'max-age 10');\n    const fileContent = await fs.readFile(filePath);\n    const contentHash = crypto\n      .createHash('md5')\n      .update(fileContent)\n      .digest('base64');\n    const ctime = statObj.ctime.toUTCString();\n    const ifNoMatch = req.headers['if-no-match'];\n    const ifModifiedSince = req.headers['if-modified-since'];\n\n    if (ifNoMatch === contentHash || ifModifiedSince === ctime) {\n      return true;\n    }\n    res.setHeader('Etag', contentHash);\n    res.setHeader('Last-Modified', ctime);\n    return false;\n  }\n  async sendFile(req, res, filePath, statObj) {\n    const isCache = await this.cache(req, res, filePath, statObj);\n    if (isCache) {\n      res.statusCode = 304;\n      res.end();\n      return;\n    }\n    res.setHeader('Content-Type', `${mime.getType(filePath)};charset=utf-8`);\n    createReadStream(filePath).pipe(res);\n  }\n  async requestListener(req, res) {\n    const url = new URL(req.url, `http://${req.headers.host}`);\n    this.pathname = decodeURIComponent(url.pathname);\n    const filePath = path.join(this.opts.directory, this.pathname);\n    try {\n      const statObj = await fs.stat(filePath);\n      if (statObj.isDirectory()) {\n        const resolvePath = path.join(filePath, 'index.html');\n        fs.access(resolvePath)\n          .then(() => {\n            this.sendFile(req, res, resolvePath, statObj);\n          })\n          .catch((e) => {\n            this.showList(req, res, filePath);\n          });\n        return;\n      }\n      await this.sendFile(req, res, filePath, statObj);\n    } catch (error) {\n      console.log(error);\n      res.statusCode = 404;\n      res.end('Not found');\n    }\n  }\n  async showList(req, res, filePath) {\n    const dirs = await fs.readdir(filePath);\n    const pathDirs = dirs.map((dir) => ({\n      dir,\n      path: path.join(this.pathname, dir),\n    }));\n    const html = ejs.render(\n      `<% dirs.forEach(function(item){ %>\n        <li><a href=\"<%=item.path%>\"><%=item.dir%></a></li>\n      <%})%>`,\n      { dirs: pathDirs },\n    );\n    res.setHeader('Content-Type', 'text/html;charset=utf-8');\n    res.end(html);\n  }\n  start() {\n    const server = http.createServer(this.requestListener.bind(this));\n    server.listen(this.opts.port, this.opts.host, () => {\n      const { port, host, ssl } = this.opts;\n      const canonicalHost = this.opts.host === '0.0.0.0' ? '127.0.0.1' : host,\n        protocol = ssl ? 'https://' : 'http://';\n\n      console.log(\n        [\n          colors.yellow('Starting up http-server, serving '),\n          colors.cyan(this.root),\n          ssl ? colors.yellow(' through') + colors.cyan(' https') : '',\n          colors.yellow('\\nAvailable on:'),\n        ].join(''),\n      );\n\n      console.log('Hit CTRL-C to stop the server');\n      var openUrl = protocol + canonicalHost + ':' + port;\n      console.log('open: ' + openUrl);\n      // opener(openUrl);\n    });\n  }\n}\nmodule.exports = HttpServer;",lang:"js"}))))}}]);