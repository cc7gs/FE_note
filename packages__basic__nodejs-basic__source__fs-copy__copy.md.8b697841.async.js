(self["webpackChunkFE_note"]=self["webpackChunkFE_note"]||[]).push([[7309],{1422:e=>{"use strict";e.exports={}},3859:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t={}},6190:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>s});var t=r(7294),c=r(6584),a=r(2196);r(3859);const s=e=>(t.useEffect((()=>{null!==e&&void 0!==e&&e.location.hash&&c.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement(a.Z,{code:"import  {resolve} from 'path';\nimport * as fs from 'fs';\n\n\n/**\n * @description \u8fb9\u8bfb\u53d6\u8fb9\u5199\u5165copy\u95ee\u9898\n * @param source \u6e90\u6587\u4ef6\n * @param target \u76ee\u6807\u6587\u4ef6\n * @param callback \u56de\u8c03\u51fd\u6570\n */\nconst copy=(source,target,callback)=>{\n  const SIZE=3;\n  const buffer=Buffer.alloc(SIZE);\n  let readOffset=0;\n  let  writeOffset=0;\n\n   fs.open(source,'r',(err,rfd)=>{\n      if(err) return callback(err);\n      fs.open(target,'w',(err,wfd)=>{\n        if(err) return callback(err);\n        \n        const next=()=>{\n          fs.read(rfd,buffer,0,SIZE,readOffset,(err,byteRead)=>{\n            if(err) return callback(err);\n            fs.write(wfd,buffer,0,byteRead,writeOffset,(err,written)=>{\n              if(err) return callback(err);\n              readOffset+=byteRead;\n              writeOffset+=written; \n\n              // \u8868\u793a\u672c\u6b21\u8bfb\u53d6\u5b8c\u6bd5\n              if(byteRead<SIZE){\n                fs.close(rfd,()=>{});\n                fs.close(wfd,()=>{});\n                callback();\n                return;\n               }\n               next();\n            })\n          })\n        };\n         next();\n\n      })\n   })\n}\n\n// copy(resolve(__dirname,'name.txt'),resolve(__dirname,'copy.txt'),(err)=>{\n//   if(err){\n//     console.log('copy err',err);\n//     return\n//   }\n//   console.log('copy success')\n// })",lang:"ts"}))))}}]);