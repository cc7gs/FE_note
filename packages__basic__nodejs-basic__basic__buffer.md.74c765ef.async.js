(self["webpackChunkFE_note"]=self["webpackChunkFE_note"]||[]).push([[4713],{1422:e=>{"use strict";e.exports={}},3859:(e,n,f)=>{"use strict";f.r(n),f.d(n,{default:()=>t});const t={}},4194:(e,n,f)=>{"use strict";f.r(n),f.d(n,{default:()=>o});var t=f(7294),r=f(6584),c=f(2196);f(3859);const o=e=>(t.useEffect((()=>{null!==e&&void 0!==e&&e.location.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h2",{id:"buffer-\u8fde\u63a5"},t.createElement(r.AnchorLink,{to:"#buffer-\u8fde\u63a5","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"buffer \u8fde\u63a5"),t.createElement(c.Z,{code:"/**\n * \u4f20\u8f93\u90fd\u662f\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\n * 1\u5b57\u8282 ==> 8 bit\n * uft8\u4e2d \u4e09\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\n */\n\nfunction bufferConcat() {\n  // 1. \u901a\u8fc7\u957f\u5ea6\u58f0\u660e, \u58f0\u660e5\u4e2a\u5b57\u8282\n  const buffer = Buffer.alloc(5);\n  const buffer1 = Buffer.from('\u5434\u6668');\n  console.log(buffer);\n  console.log(buffer1);\n\n  //2. \u62fc\u63a5buffer\n  const finalBuffer = Buffer.concat([buffer1, buffer]);\n\n  console.log('final', finalBuffer)\n}\n\n\nfunction concat(list, length) {\n  const curLength = length || list.reduce((acc, cur) => acc + cur.length, 0);\n  const buffer = Buffer.alloc(curLength);\n  let offset = 0;\n  list.forEach(bf => {\n    bf.copy(buffer, offset);\n    offset += bf.length;\n  });\n  return buffer.slice(0, offset);\n}",lang:"js"}),t.createElement("h2",{id:"buffer-\u5207\u5206"},t.createElement(r.AnchorLink,{to:"#buffer-\u5207\u5206","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"buffer \u5207\u5206"),t.createElement(c.Z,{code:"function split(sep,source){\n  const sepLen=Buffer.from(sep).length;\n  const arr=[];\n  let offset=0,curIndex=0;\n  while((curIndex=source.indexOf(sep,offset))!==-1){\n    arr.push(source.slice(offset,curIndex));\n    offset=sepLen+curIndex;\n  }\n  arr.push(source.slice(offset))\n  return arr;\n}\n\n\nfunction test() {\n  const buffer = Buffer.from('\u6211\u662f\u5434\u6668\u6668,my name is wu chen chen');\n  // console.log(buffer.indexOf('\u6668',0))\n  console.log(split('\u6668',buffer).map(item=>item.toString()));\n}\ntest()",lang:"js"}))))}}]);